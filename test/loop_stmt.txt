# labelled for

test {
  label: for (x, 1.., 2..3) |a,i| {}
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    BlockLabel(Identifier),
    ForStatement(
      for,
      ForItem(Identifier),
      ForItem(Integer, ".."),
      ForItem(Integer, "..", Integer),
      PtrListPayload(
        Identifier,
        Identifier
      ),
      Block
    )
  )
)))

# inline for expr

test {
  inline for (a) |i| y = i;
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    inline,
    ForStatement(
      for,
      ForItem(Identifier),
      PtrListPayload(Identifier),
      AssignExpr(Identifier,"=",Identifier)
    )
  )
)))

# for else

test {
  inline for (a) |i| y = i else {};
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    inline,
    ForStatement(
      for,
      ForItem(Identifier),
      PtrListPayload(Identifier),
      AssignExpr(Identifier,"=",Identifier),
      else,
      Block
    )
  )
)))

# while

test {
  while (a >= 0) {}
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    WhileStatement(
      while,
      CompareExpr(Identifier, ">=", Integer),
      Block
    )
  )
)))

# while payload

test {
  while (a >= 0) |*x| {}
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    WhileStatement(
      while,
      CompareExpr(Identifier, ">=", Integer),
      PtrPayload("*", Identifier),
      Block
    )
  )
)))

# while continue expr

test {
  while (a >= 0) : (a -= 1) {}
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    WhileStatement(
      while,
      CompareExpr(Identifier, ">=", Integer),
      WhileContinueExpr(AssignExpr(Identifier, "-=", Integer)),
      Block
    )
  )
)))

# inline while expr

test {
  inline while (a >= 0) a = 3;
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    inline,
    WhileStatement(
      while,
      CompareExpr(Identifier, ">=", Integer),
      AssignExpr(Identifier, "=", Integer)
    )
  )
)))

# while else

test {
  while (a >= 0) a = 3 else {};
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    WhileStatement(
      while,
      CompareExpr(Identifier, ">=", Integer),
      AssignExpr(Identifier, "=", Integer),
      else,
      Block
    )
  )
)))

# while else with payload

test {
  while (a >= 0) a = 3 else |err| {};
}

==>

Root(TestDecl(test,Block(
  LabeledStatement(
    WhileStatement(
      while,
      CompareExpr(Identifier, ">=", Integer),
      AssignExpr(Identifier, "=", Integer),
      else,
      Payload(Identifier),
      Block
    )
  )
)))








# switch stmt

test {
  switch (x) {}
}

==>

Root(TestDecl(test,Block(
  SwitchExpr(
    switch, Identifier
  )
)))


# switch stmt with one prong

test {
  switch (x) {
    1 => 3
  }
}

==>

Root(TestDecl(test,Block(
  SwitchExpr(
    switch, Identifier,
    SwitchProng(
      SwitchItem(Integer),
      Integer
    )
  )
)))


# switch stmt with prongs

test {
  switch (x) {
    inline 2 => 5,
    3...5 => 6,
    7,10 => 13,
    6,8,9 => |x| x,
    else => |*x,y| z
  }
}

==>

Root(TestDecl(test,Block(
  SwitchExpr(
    switch, Identifier,
    SwitchProng(
      inline,
      SwitchItem(Integer),
      Integer
    ),
    SwitchProng(
      SwitchItem(Integer, Integer),
      Integer
    ),
    SwitchProng(
      SwitchItem(Integer),
      SwitchItem(Integer),
      Integer
    ),
    SwitchProng(
      SwitchItem(Integer),
      SwitchItem(Integer),
      SwitchItem(Integer),
      PtrIndexPayload(Identifier),
      Identifier
    ),
    SwitchProng(
      else,
      PtrIndexPayload("*",Identifier,Identifier),
      Identifier
    ),
  )
)))
