@top Root {
  ContainerDocComment?
  containerMembers
  eof
}

@skip {
  space | LineComment
}

@detectDelim

@precedence {
  // stmt-level
  useop,
  extend_if_assign,
  extend_if_block,
  finish_stmt,
  after_assert,
  before_assert,
  after_else,
  before_else,
  after_suffix,
  before_suffix,
  after_label,
  before_label,
  comptime_paramdecl,
  comptime_typeexpr,
  after_typeexpr,
  before_typeexpr,
  inline_loop,
  outline_loop,
  block_expr_block,
  primary_expr_block,
  // expr
  prefix,
  multiply @left,
  addition @left,
  bitshift @left,
  bitwise @left,
  compare @left,
  bool_and @left,
  bool_or @left,
  // more
  expr1,
  expr2,
  expr3,
  assign_stmt,
  switch_stmt,
  ident_primary,
  ptr_type_start,
  before_break_label,
  after_break_label,
  block_label
}

// *** Top level ***
containerMembers {
  containerDeclaration* (ContainerField ',')* ContainerField
  | containerDeclaration*
  | containerDeclaration* (ContainerField ',')+ containerDeclaration*
}

containerDeclaration {
  TestDecl { kw<'test'> (StringLiteralSingle | Identifier)? Block }
  | ComptimeDecl { kw<'comptime'> Block }
  | Decl { DocComment? kw<'pub'>? decl }
}
decl {
  (
    kw<'export'>
    | kw<'extern'> StringLiteralSingle?
    | kw<'inline'>
    | kw<'noinline'>
  )? FnProto (';' | Block)
  | VarDecl {
    (
      kw<'export'>
      | kw<'extern'> StringLiteralSingle?
    )? kw<'threadlocal'>? varDecl
  }
  | kw<'usingnamespace'> expr ';'
}

FnProto {
  kw<'fn'> Identifier? '(' commaSep<ParamDecl> ')'
    ByteAlign? AddrSpace? LinkSection? CallConv? '!'? typeExpr
}

varDecl {
  (kw<'const'> | kw<'var'>) Identifier (':' typeExpr)?
    ByteAlign? AddrSpace? LinkSection? ('=' expr)? ';'
}

ContainerField {
  DocComment? kw<'comptime'>? (
    Identifier ':' typeExpr
    | Identifier
    | !before_typeexpr typeExpr
  ) !after_typeexpr ByteAlign? ('=' expr)?
}

// *** Block Level ***
statement {
  VarDecl { kw<'comptime'>? varDecl }
  | BlockExprStatement {
      (
        kw<'comptime'> | kw<'nosuspend'> | kw<'suspend'> | kw<'defer'>
        | kw<'errdefer'> Payload?
      )
      (blockExpr | expr !finish_stmt ';')
    }
  | IfStatement {
      ifPrefix blockExpr
      | ifPrefix assignExpr ( ';' | kw<'else'> Payload? statement )
    }
  | LabeledStatement {
      // TODO: this doesn't allow an unlabelled block that's *not* followed by a semicolon
      BlockLabel Block |
      BlockLabel? loopStatement
    }
  | SwitchExpr !switch_stmt
  | assignExpr !assign_stmt ';'
}

loopStatement {
  kw<'inline'>? (ForStatement | WhileStatement)
}

ForStatement {
  forPrefix blockExpr
  | forPrefix assignExpr ( ';' | kw<'else'> statement )
}

WhileStatement {
  whilePrefix blockExpr
  | whilePrefix assignExpr ( ';' | kw<'else'> Payload? statement )
}

blockExpr {
  BlockLabel? !block_expr_block Block
}

// *** Expression Level ***
assignExpr {
  AssignExpr { expr !useop assignOp expr }
  | expr
}

expr {
  BoolOrExpr { expr !bool_or kw<'or'> expr }
  | BoolAndExpr { expr !bool_and kw<'and'> expr }
  | CompareExpr { expr !compare compareOp expr }
  | BitwiseExpr { expr !bitwise bitwiseOp expr }
  | BitShiftExpr { expr !bitshift bitShiftOp expr }
  | AdditionExpr { expr !addition additionOp expr }
  | MultiplyExpr { expr !multiply multiplyOp expr }
  | PrefixExpr { !prefix prefixOp expr }
  | primaryExpr
}

primaryExpr {
  AsmExpr
  | IfExpr
  | BreakExpr { kw<'break'> (!before_break_label BreakLabel)? !after_break_label expr? }
  | ContinueExpr { kw<'continue'> (!before_break_label BreakLabel)? !after_break_label }
  | ComptimeExpr { kw<'comptime'> !useop expr }
  | NosuspendExpr { kw<'nosuspend'> expr }
  | ResumeExpr { kw<'resume'> expr }
  | ReturnExpr { kw<'return'> expr? }
  | BlockLabel? LoopExpr
  | !primary_expr_block Block
  | typeExpr InitList?
}

IfExpr {
  ifPrefix expr (!before_else kw<'else'> Payload? expr)? !after_else
}

Block {
  '{' statement* '}'
}

LoopExpr {
  kw<'inline'> (forExpr | whileExpr) !inline_loop
  | (forExpr | whileExpr) !outline_loop
}

forExpr {
  forPrefix expr (!before_else kw<'else'> expr)? !after_else
}

whileExpr {
  whilePrefix expr (!before_else kw<'else'> Payload? expr)? !after_else
}

InitList {
  '{' FieldInit (',' FieldInit)* ','? '}'
  | '{' expr (',' expr)* ','? '}'
  | '{' '}'
}

typeExpr {
  PrefixTypeOp* suffixExpr (!before_assert '!' typeExpr)? !after_assert
}

suffixExpr {
  kw<'async'> primaryTypeExpr suffixOp* FnCallArguments
  | primaryTypeExpr (!before_suffix suffixOp | FnCallArguments)* !after_suffix
}

primaryTypeExpr {
  BuiltinIdentifier FnCallArguments
  | CharLiteral
  | ContainerDecl
  | '.' Identifier
  | '.' InitList
  | ErrorSetDecl
  | Float
  | FnProto
  | GroupedExpr
  // | LabeledTypeExpr
  | !ident_primary Identifier
  // | IfTypeExpr
  | Integer
  | ComptimeExpr { !comptime_typeexpr kw<'comptime'> typeExpr }
  | kw<'error'> '.' Identifier
  | kw<'anyframe'>
  | kw<'unreachable'>
  | StringLiteral
  | SwitchExpr
}

ContainerDecl {
  (kw<'extern'> | kw<'packed'>)? ContainerDeclAuto
}

ErrorSetDecl {
  kw<'error'> '{' commaSep<DocComment? Identifier> '}'
}

GroupedExpr {
  '(' expr ')'
}

IfTypeExpr {
  ifPrefix typeExpr (!before_else kw<'else'> Payload? typeExpr)? !after_else
}

LabeledTypeExpr {
  BlockLabel Block
  | (!before_label BlockLabel)? !after_label LoopTypeExpr
}

LoopTypeExpr {
  kw<'inline'>? (ForTypeExpr | WhileTypeExpr)
}

ForTypeExpr {
  forPrefix typeExpr (!before_else kw<'else'> typeExpr)? !after_else
}

WhileTypeExpr {
  whilePrefix typeExpr (!before_else kw<'else'> Payload? typeExpr)? !after_else
}

SwitchExpr {
  kw<'switch'> '(' expr ')' '{' commaSep<SwitchProng> '}'
}

// *** Assembly ***
AsmExpr {
  kw<'asm'> kw<'volatile'>? '(' expr
    (AsmOutput{ ':' commaSep<AsmOutputItem> }
      (AsmInput { ':' commaSep<AsmInputItem> }
        (AsmClobbers { ':' commaSep<StringLiteral> })?
      )?
    )?
  ')'
}

AsmOutputItem {
  '[' Identifier ']' StringLiteral '(' ('->' typeExpr | Identifier) ')'
}

AsmInputItem {
  '[' Identifier ']' StringLiteral '(' expr ')'
}

// *** Helper grammar ***
BreakLabel {
  ':' Identifier
}

BlockLabel {
  !block_label Identifier ':'
}

FieldInit {
  '.' Identifier '=' expr
}

WhileContinueExpr {
  ':' '(' assignExpr ')'
}

LinkSection {
  kw<'linksection'> '(' expr ')'
}

AddrSpace {
  kw<'addrspace'> '(' expr ')'
}

// Fn specific
CallConv {
  kw<'callconv'> '(' expr ')'
}

ParamDecl {
  DocComment?
    (
      kw<'noalias'>
      | !comptime_paramdecl kw<'comptime'>
    )?
    (Identifier ':')?
    (kw<'anytype'> | typeExpr)
  | '...'
}

// Control flow prefixes
ifPrefix {
  kw<'if'> '(' expr ')' PtrPayload?
}

whilePrefix {
  kw<'while'> '(' expr ')' PtrPayload? WhileContinueExpr?
}

forPrefix {
  kw<'for'> '(' forArgumentsList ')' PtrListPayload
}

// Payloads
Payload {
  '|' Identifier '|'
}

PtrPayload {
  '|' '*'? Identifier '|'
}

PtrIndexPayload {
  '|' '*'? Identifier (',' Identifier)? '|'
}

PtrListPayload {
  '|' '*'? Identifier (',' '*'? Identifier)* ','? '|'
}

// Switch specific
SwitchProng {
  kw<'inline'>? switchCase '=>' PtrIndexPayload? assignExpr
}

switchCase {
  SwitchItem (',' SwitchItem)* ','?
  | kw<'else'>
}

SwitchItem {
  expr ('...' expr)?
}

// For specific
forArgumentsList {
  ForItem (',' ForItem)* ','?
}

ForItem {
  expr ('..' expr?)?
}

// Operators
assignOp {
  '*=' | '*|=' | '/=' | '%=' | '+=' | '+|=' | '-=' | '-|=' | '<<='
  | '<<|=' | '>>=' | '&=' | '^=' | '|=' | '*%=' | '+%=' | '-%=' | '='
}

compareOp {
  '==' | '!=' | '<' | '>' | '<=' | '>='
}

bitwiseOp {
  '&' | '^' | '|' | kw<'orelse'>
  | kw<'catch'> Payload?
}

bitShiftOp {
  '<<' | '>>' | '<<|'
}

additionOp {
  '+' | '-' | '++' | '+%' | '-%' | '+|' | '-|'
}

multiplyOp {
  '||' | '*' | '/' | '%' | '**' | '*%' | '*|'
}

prefixOp {
  '!' | '-' | '~' | '-%' | '&' | kw<'try'> | kw<'await'>
}

PrefixTypeOp {
  '?'
  | kw<'anyframe'> '->'
  | SliceTypeStart (ByteAlign | AddrSpace | kw<'const'> | kw<'volatile'> | kw<'allowzero'>)*
  | !ptr_type_start PtrTypeStart (AddrSpace | kw<'align'> '(' expr (':' expr ':' expr)? ')' | kw<'const'> | kw<'volatile'> | kw<'allowzero'>)*
  | ArrayTypeStart
}

suffixOp {
  // TODO: good name
  SomethingInBracketsIdk { '[' expr ('..' (expr? (':' expr)?)?)? ']' }
  | '.' Identifier
  | '.*'
  | '.?'
}

FnCallArguments {
  '(' commaSep<expr> ')'
}

//  Ptr specific
SliceTypeStart {
  '[' (':' expr)? ']'
}

PtrTypeStart {
  '*'
  | '**'
  | '[' '*' ('c' | ':' expr)? ']'
}

ArrayTypeStart {
  '[' expr (':' expr)? ']'
}

// ContainerDecl specific
ContainerDeclAuto {
  ContainerDeclType '{' ContainerDocComment? containerMembers '}'
}

ContainerDeclType {
  kw<'struct'> ('(' expr ')')?
  | kw<'opaque'>
  | kw<'enum'> ('(' expr ')')?
  | kw<'union'> ('(' (kw<'enum'> ('(' expr ')')? | expr) ')')?
}

// Alignment
ByteAlign { kw<'align'> '(' expr ')' }

commaSep<e> { "" | e (',' e)* ','? }

@tokens {
  eof { @eof }

  bin { $[01] }
  oct { $[0-7] }
  dec { $[0-9] }
  hex { $[0-9a-fA-F] }

  bin_ { '_'? bin }
  oct_ { '_'? oct }
  hex_ { '_'? hex }
  dec_ { '_'? dec }

  bin_int { bin bin_* }
  oct_int { oct oct_* }
  hex_int { hex hex_* }
  dec_int { dec dec_* }

  // TODO: lezer operates on chars not bytes
  ox80_oxBF { $[\u0080-\u00bf] }
  oxF4 { '\u00f4' }
  ox80_ox8F { $[\u0080-\u008f] }
  oxF1_oxF3 { $[\u00f1-\u00f3] }
  oxF0 { '\u00f0' }
  ox90_0xBF { $[\u0090-\u00bf] }
  oxEE_oxEF { $[\u00ee-\u00ef] }
  oxED { '\u00ed' }
  ox80_ox9F { $[\u0080-\u009f] }
  oxE1_oxEC { $[\u00e1-\u00ec] }
  oxE0 { '\u00e0' }
  oxA0_oxBF { $[\u00a0-\u00bf] }
  oxC2_oxDF { $[\u00c2-\u00df] }

  mb_utf8_literal {
    oxF4      ox80_ox8F ox80_oxBF ox80_oxBF
    | oxF1_oxF3 ox80_oxBF ox80_oxBF ox80_oxBF
    | oxF0      ox90_0xBF ox80_oxBF ox80_oxBF
    | oxEE_oxEF ox80_oxBF ox80_oxBF
    | oxED      ox80_ox9F ox80_oxBF
    | oxE1_oxEC ox80_oxBF ox80_oxBF
    | oxE0      oxA0_oxBF ox80_oxBF
    | oxC2_oxDF ox80_oxBF
  }

  ascii_char_not_nl_slash_squote { $[\u0000-\u0009\u000b-\u0026\u0028-\u005b\u005d-\u007f] }

  char_escape {
    "\\x" hex hex
    | "\\u{" hex+ "}"
    | "\\" $[nr\\t'"]
  }

  char_char {
    mb_utf8_literal
    | char_escape
    | ascii_char_not_nl_slash_squote
  }

  string_char {
    char_escape
    | ![\\"\n]
  }

  @precedence {
    DocComment, ContainerDocComment,
    LineComment,
    '/'
  }

  ContainerDocComment { ('//!' ![\n]* $[ \n]*)+ }
  DocComment { ('///' ![\n]* $[ \n]*)+ }
  LineComment { '//' ![\n]* | '////' ![\n]* }
  LineString { ("\\\\" ![\n]* $[ \n]*)+ }
  space { $[ \n] }

  CharLiteral { "'" char_char "'" }
  @precedence {
    Float,
    Integer
  }
  Float {
    "0x" hex_int "." hex_int ($[pP] $[-+]? dec_int)?
    |      dec_int "." dec_int ($[eE] $[-+]? dec_int)?
    | "0x" hex_int $[pP] $[-+]? dec_int
    |      dec_int $[eE] $[-+]? dec_int
  }
  Integer {
    "0b" bin_int
    | "0o" oct_int
    | "0x" hex_int
    |      dec_int
  }
  stringLiteralSingle { "\"" string_char* "\"" }
  StringLiteralSingle[@name=StringLiteral] { stringLiteralSingle }
  StringLiteral {
    stringLiteralSingle
      | (LineString   )+
  }
  Identifier {
    $[A-Za-z_] $[A-Za-z0-9_]*
    | "@" stringLiteralSingle
  }
  BuiltinIdentifier { "@" $[A-Za-z_] $[A-Za-z0-9_]* }

  @precedence {
    '&=',
    '&'
  }
  '&' '&='
  @precedence {
    '*%=', '*|=',
    '*%', '*|', '*=', '**',
    '*'
  }
  '*' '**' '*=' '*%' '*%=' '*|' '*|='
  @precedence {
    '^=',
    '^'
  }
  '^' '^=' ':' ','
  @precedence {
    '...',
    '..', '.*', '.?',
    '.'
  }
  '.' '..' '...' '.*' '.?'
  @precedence {
    '==', '=>',
    '='
  }
  '=' '==' '=>'
  @precedence {
    '!=',
    '!'
  }
  '!' '!='
  @precedence {
    '<<|=',
    '<<=', '<<|',
    '<<', '<=',
    '<'
  }
  '<' '<<' '<<=' '<<|' '<<|=' '<=' '{' '[' '('
  @precedence {
    '-%=', '-|='
    '-=', '-%', '->', '-|',
    '-'
  }
  '-' '-=' '-%' '-%=' '-|' '-|=' '->'
  @precedence {
    '%=',
    '%'
  }
  '%' '%='
  @precedence {
    '||', '|=',
    '|'
  }
  '|' '||' '|='
  @precedence {
    '+%=', '+|=',
    '++', '+=', '+%', '+|',
    '+'
  }
  @precedence {
    Identifier,
    'c'
  }
  '+' '++' '+=' '+%' '+%=' '+|' '+|=' 'c' '?'
  @precedence {
    '>>=',
    '>>', '>=',
    '>'
  }
  '>' '>>' '>>=' '>=' '}'  ']'  ')' ';'
  @precedence {
    '/=',
    '/'
  }
  '/' '/=' '~'
}

kw<word> { @specialize[@name={word}]<Identifier, word> }
