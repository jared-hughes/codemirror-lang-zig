@top Root {
  skip
  container_doc_comment?
  ContainerMembers
  eof
}

// *** Top level ***
ContainerMembers {
  ContainerDeclarations (ContainerField COMMA)* (ContainerField | ContainerDeclarations)
}

ContainerDeclarations {
  TestDecl ContainerDeclarations
  | ComptimeDecl ContainerDeclarations
  | doc_comment? KEYWORD_pub? Decl ContainerDeclarations
}
TestDecl {
  KEYWORD_test (STRINGLITERALSINGLE | IDENTIFIER)? Block
}
ComptimeDecl {
  KEYWORD_comptime Block
}

Decl {
  (KEYWORD_export | KEYWORD_extern STRINGLITERALSINGLE? | (KEYWORD_inline | KEYWORD_noinline))? FnProto (SEMICOLON | Block)
  | (KEYWORD_export | KEYWORD_extern STRINGLITERALSINGLE?)? KEYWORD_threadlocal? VarDecl
  | KEYWORD_usingnamespace Expr SEMICOLON
}

FnProto {
  KEYWORD_fn IDENTIFIER? LPAREN ParamDeclList RPAREN ByteAlign? AddrSpace? LinkSection? CallConv? EXCLAMATIONMARK? TypeExpr
}

VarDecl {
  (KEYWORD_const | KEYWORD_var) IDENTIFIER (COLON TypeExpr)? ByteAlign? AddrSpace? LinkSection? (EQUAL Expr)? SEMICOLON
}

ContainerField {
  doc_comment? KEYWORD_comptime? IDENTIFIER (COLON TypeExpr)? ByteAlign? (EQUAL Expr)?
  // TODO: why is !KEYWORD_fn before TypeExpr?
  | doc_comment? KEYWORD_comptime? (IDENTIFIER COLON)? TypeExpr ByteAlign? (EQUAL Expr)?
}

// *** Block Level ***
Statement {
  KEYWORD_comptime? VarDecl
  | KEYWORD_comptime BlockExprStatement
  | KEYWORD_nosuspend BlockExprStatement
  | KEYWORD_suspend BlockExprStatement
  | KEYWORD_defer BlockExprStatement
  | KEYWORD_errdefer Payload? BlockExprStatement
  | IfStatement
  | LabeledStatement
  | SwitchExpr
  | AssignExpr SEMICOLON
}

IfStatement {
  IfPrefix BlockExpr ( KEYWORD_else Payload? Statement )?
  | IfPrefix AssignExpr ( SEMICOLON | KEYWORD_else Payload? Statement )
}

LabeledStatement {
  BlockLabel? (Block | LoopStatement)
}

LoopStatement {
  KEYWORD_inline? (ForStatement | WhileStatement)
}

ForStatement {
  ForPrefix BlockExpr ( KEYWORD_else Statement )?
  | ForPrefix AssignExpr ( SEMICOLON | KEYWORD_else Statement )
}

WhileStatement {
  WhilePrefix BlockExpr ( KEYWORD_else Payload? Statement )?
  | WhilePrefix AssignExpr ( SEMICOLON | KEYWORD_else Payload? Statement )
}

BlockExprStatement {
  BlockExpr
  | AssignExpr SEMICOLON
}

BlockExpr {
  BlockLabel? Block
}

// *** Expression Level ***
AssignExpr {
  Expr (AssignOp Expr)?
}

Expr {
  BoolOrExpr
}

BoolOrExpr {
  BoolAndExpr (KEYWORD_or BoolAndExpr)*
}

BoolAndExpr {
  CompareExpr (KEYWORD_and CompareExpr)*
}

CompareExpr {
  BitwiseExpr (CompareOp BitwiseExpr)?
}

BitwiseExpr {
  BitShiftExpr (BitwiseOp BitShiftExpr)*
}

BitShiftExpr {
  AdditionExpr (BitShiftOp AdditionExpr)*
}

AdditionExpr {
  MultiplyExpr (AdditionOp MultiplyExpr)*
}

MultiplyExpr {
  PrefixExpr (MultiplyOp PrefixExpr)*
}

PrefixExpr {
  PrefixOp* PrimaryExpr
}

PrimaryExpr {
  AsmExpr
  | IfExpr
  | KEYWORD_break BreakLabel? Expr?
  | KEYWORD_comptime Expr
  | KEYWORD_nosuspend Expr
  | KEYWORD_continue BreakLabel?
  | KEYWORD_resume Expr
  | KEYWORD_return Expr?
  | BlockLabel? LoopExpr
  | Block
  | CurlySuffixExpr
}

IfExpr {
  IfPrefix Expr (KEYWORD_else Payload? Expr)?
}

Block {
  LBRACE Statement* RBRACE
}

LoopExpr {
  KEYWORD_inline? (ForExpr | WhileExpr)
}

ForExpr {
  ForPrefix Expr (KEYWORD_else Expr)?
}

WhileExpr {
  WhilePrefix Expr (KEYWORD_else Payload? Expr)?
}

CurlySuffixExpr {
  TypeExpr InitList?
}

InitList {
  LBRACE FieldInit (COMMA FieldInit)* COMMA? RBRACE
  | LBRACE Expr (COMMA Expr)* COMMA? RBRACE
  | LBRACE RBRACE
}

TypeExpr {
  PrefixTypeOp* ErrorUnionExpr
}

ErrorUnionExpr {
  SuffixExpr (EXCLAMATIONMARK TypeExpr)?
}

SuffixExpr {
  KEYWORD_async PrimaryTypeExpr SuffixOp* FnCallArguments
  | PrimaryTypeExpr (SuffixOp | FnCallArguments)*
}

PrimaryTypeExpr {
  BUILTINIDENTIFIER FnCallArguments
  | CHAR_LITERAL
  | ContainerDecl
  | DOT IDENTIFIER
  | DOT InitList
  | ErrorSetDecl
  | FLOAT
  | FnProto
  | GroupedExpr
  | LabeledTypeExpr
  | IDENTIFIER
  | IfTypeExpr
  | INTEGER
  | KEYWORD_comptime TypeExpr
  | KEYWORD_error DOT IDENTIFIER
  | KEYWORD_anyframe
  | KEYWORD_unreachable
  | STRINGLITERAL
  | SwitchExpr
}

ContainerDecl {
  (KEYWORD_extern | KEYWORD_packed)? ContainerDeclAuto
}

ErrorSetDecl {
  KEYWORD_error LBRACE IdentifierList RBRACE
}

GroupedExpr {
  LPAREN Expr RPAREN
}

IfTypeExpr {
  IfPrefix TypeExpr (KEYWORD_else Payload? TypeExpr)?
}

LabeledTypeExpr {
  BlockLabel Block
  | BlockLabel? LoopTypeExpr
}

LoopTypeExpr {
  KEYWORD_inline? (ForTypeExpr | WhileTypeExpr)
}

ForTypeExpr {
  ForPrefix TypeExpr (KEYWORD_else TypeExpr)?
}

WhileTypeExpr {
  WhilePrefix TypeExpr (KEYWORD_else Payload? TypeExpr)?
}

SwitchExpr {
  KEYWORD_switch LPAREN Expr RPAREN LBRACE SwitchProngList RBRACE
}

// *** Assembly ***
AsmExpr {
  KEYWORD_asm KEYWORD_volatile? LPAREN Expr AsmOutput? RPAREN
}

AsmOutput {
  COLON AsmOutputList AsmInput?
}

AsmOutputItem {
  LBRACKET IDENTIFIER RBRACKET STRINGLITERAL LPAREN (MINUSRARROW TypeExpr | IDENTIFIER) RPAREN
}

AsmInput {
  COLON AsmInputList AsmClobbers?
}

AsmInputItem {
  LBRACKET IDENTIFIER RBRACKET STRINGLITERAL LPAREN Expr RPAREN
}

AsmClobbers {
  COLON StringList
}

// *** Helper grammar ***
BreakLabel {
  COLON IDENTIFIER
}

BlockLabel {
  IDENTIFIER COLON
}

FieldInit {
  DOT IDENTIFIER EQUAL Expr
}

WhileContinueExpr {
  COLON LPAREN AssignExpr RPAREN
}

LinkSection {
  KEYWORD_linksection LPAREN Expr RPAREN
}

AddrSpace {
  KEYWORD_addrspace LPAREN Expr RPAREN
}

// Fn specific
CallConv {
  KEYWORD_callconv LPAREN Expr RPAREN
}

ParamDecl {
  doc_comment? (KEYWORD_noalias | KEYWORD_comptime)? (IDENTIFIER COLON)? ParamType
  | DOT3
}

ParamType {
  KEYWORD_anytype
  | TypeExpr
}

// Control flow prefixes
IfPrefix {
  KEYWORD_if LPAREN Expr RPAREN PtrPayload?
}

WhilePrefix {
  KEYWORD_while LPAREN Expr RPAREN PtrPayload? WhileContinueExpr?
}

ForPrefix {
  KEYWORD_for LPAREN ForArgumentsList RPAREN PtrListPayload
}

// Payloads
Payload {
  PIPE IDENTIFIER PIPE
}

PtrPayload {
  PIPE ASTERISK? IDENTIFIER PIPE
}

PtrIndexPayload {
  PIPE ASTERISK? IDENTIFIER (COMMA IDENTIFIER)? PIPE
}

PtrListPayload {
  PIPE ASTERISK? IDENTIFIER (COMMA ASTERISK? IDENTIFIER)* COMMA? PIPE
}

// Switch specific
SwitchProng {
  KEYWORD_inline? SwitchCase EQUALRARROW PtrIndexPayload? AssignExpr
}

SwitchCase {
  SwitchItem (COMMA SwitchItem)* COMMA?
  | KEYWORD_else
}

SwitchItem {
  Expr (DOT3 Expr)?
}

// For specific
ForArgumentsList {
  ForItem (COMMA ForItem)* COMMA?
}

ForItem {
  Expr (DOT2 Expr?)?
}

// Operators
AssignOp {
  ASTERISKEQUAL
  | ASTERISKPIPEEQUAL
  | SLASHEQUAL
  | PERCENTEQUAL
  | PLUSEQUAL
  | PLUSPIPEEQUAL
  | MINUSEQUAL
  | MINUSPIPEEQUAL
  | LARROW2EQUAL
  | LARROW2PIPEEQUAL
  | RARROW2EQUAL
  | AMPERSANDEQUAL
  | CARETEQUAL
  | PIPEEQUAL
  | ASTERISKPERCENTEQUAL
  | PLUSPERCENTEQUAL
  | MINUSPERCENTEQUAL
  | EQUAL
}

CompareOp {
  EQUALEQUAL
  | EXCLAMATIONMARKEQUAL
  | LARROW
  | RARROW
  | LARROWEQUAL
  | RARROWEQUAL
}

BitwiseOp {
  AMPERSAND
  | CARET
  | PIPE
  | KEYWORD_orelse
  | KEYWORD_catch Payload?
}

BitShiftOp {
  LARROW2
  | RARROW2
  | LARROW2PIPE
}

AdditionOp {
  PLUS
  | MINUS
  | PLUS2
  | PLUSPERCENT
  | MINUSPERCENT
  | PLUSPIPE
  | MINUSPIPE
}

MultiplyOp {
  PIPE2
  | ASTERISK
  | SLASH
  | PERCENT
  | ASTERISK2
  | ASTERISKPERCENT
  | ASTERISKPIPE
}

PrefixOp {
  EXCLAMATIONMARK
  | MINUS
  | TILDE
  | MINUSPERCENT
  | AMPERSAND
  | KEYWORD_try
  | KEYWORD_await
}

PrefixTypeOp {
  QUESTIONMARK
  | KEYWORD_anyframe MINUSRARROW
  | SliceTypeStart (ByteAlign | AddrSpace | KEYWORD_const | KEYWORD_volatile | KEYWORD_allowzero)*
  | PtrTypeStart (AddrSpace | KEYWORD_align LPAREN Expr (COLON Expr COLON Expr)? RPAREN | KEYWORD_const | KEYWORD_volatile | KEYWORD_allowzero)*
  | ArrayTypeStart
}

SuffixOp {
  LBRACKET Expr (DOT2 (Expr? (COLON Expr)?)?)? RBRACKET
  | DOT IDENTIFIER
  | DOTASTERISK
  | DOTQUESTIONMARK
}

FnCallArguments {
  LPAREN ExprList RPAREN
}

//  Ptr specific
SliceTypeStart {
  LBRACKET (COLON Expr)? RBRACKET
}

PtrTypeStart {
  ASTERISK
  | ASTERISK2
  | LBRACKET ASTERISK (LETTERC | COLON Expr)? RBRACKET
}

ArrayTypeStart {
  LBRACKET Expr (COLON Expr)? RBRACKET
}

// ContainerDecl specific
ContainerDeclAuto {
  ContainerDeclType LBRACE container_doc_comment? ContainerMembers RBRACE
}

ContainerDeclType {
  KEYWORD_struct (LPAREN Expr RPAREN)?
  | KEYWORD_opaque
  | KEYWORD_enum (LPAREN Expr RPAREN)?
  | KEYWORD_union (LPAREN (KEYWORD_enum (LPAREN Expr RPAREN)? | Expr) RPAREN)?
}

// Alignment
ByteAlign {
  KEYWORD_align LPAREN Expr RPAREN
}

// Lists
IdentifierList {
  (doc_comment? IDENTIFIER COMMA)* (doc_comment? IDENTIFIER)?
}

SwitchProngList {
  (SwitchProng COMMA)* SwitchProng?
}

AsmOutputList {
  (AsmOutputItem COMMA)* AsmOutputItem?
}

AsmInputList {
  (AsmInputItem COMMA)* AsmInputItem?
}

StringList {
  (STRINGLITERAL COMMA)* STRINGLITERAL?
}

ParamDeclList {
  (ParamDecl COMMA)* ParamDecl?
}

ExprList {
  (Expr COMMA)* Expr?
}

@tokens {
  eof { @eof }

  bin { $[01] }
  oct { $[0-7] }
  dec { $[0-9] }
  hex { $[0-9a-fA-F] }

  bin_ { '_'? bin }
  oct_ { '_'? oct }
  hex_ { '_'? hex }
  dec_ { '_'? dec }

  bin_int { bin bin_* }
  oct_int { oct oct_* }
  hex_int { hex hex_* }
  dec_int { dec dec_* }

  // TODO: lezer operates on chars not bytes
  ox80_oxBF { $[\u0080-\u00bf] }
  oxF4 { '\u00f4' }
  ox80_ox8F { $[\u0080-\u008f] }
  oxF1_oxF3 { $[\u00f1-\u00f3] }
  oxF0 { '\u00f0' }
  ox90_0xBF { $[\u0090-\u00bf] }
  oxEE_oxEF { $[\u00ee-\u00ef] }
  oxED { '\u00ed' }
  ox80_ox9F { $[\u0080-\u009f] }
  oxE1_oxEC { $[\u00e1-\u00ec] }
  oxE0 { '\u00e0' }
  oxA0_oxBF { $[\u00a0-\u00bf] }
  oxC2_oxDF { $[\u00c2-\u00df] }

  mb_utf8_literal {
    oxF4      ox80_ox8F ox80_oxBF ox80_oxBF
    | oxF1_oxF3 ox80_oxBF ox80_oxBF ox80_oxBF
    | oxF0      ox90_0xBF ox80_oxBF ox80_oxBF
    | oxEE_oxEF ox80_oxBF ox80_oxBF
    | oxED      ox80_ox9F ox80_oxBF
    | oxE1_oxEC ox80_oxBF ox80_oxBF
    | oxE0      oxA0_oxBF ox80_oxBF
    | oxC2_oxDF ox80_oxBF
  }

  ascii_char_not_nl_slash_squote { $[\u0000-\u0009\u000b-\u0026\u0028-\u005b\u005d-\u007f] }

  char_escape {
    "\\x" hex hex
    | "\\u{" hex+ "}"
    | "\\" $[nr\\t'"]
  }

  char_char {
    mb_utf8_literal
    | char_escape
    | ascii_char_not_nl_slash_squote
  }

  string_char {
    char_escape
    | $[^\\"\n]
  }

  container_doc_comment { ('//!' ![\n]* ![ \n]* skip)+ }
  doc_comment { ('///' ![\n]* $[ \n]* skip)+ }
  // TODO There was a ![!/] that seems to be negative forward lookahead (by 2 bytes?) for a slash
  line_comment { '//' ![\n]* | '////' ![\n]* }
  line_string { ("\\\\" ![\n]* $[ \n]*)+ }
  skip { ($[ \n] | line_comment)* }

  CHAR_LITERAL { "'" char_char "'" skip }
  FLOAT {
    "0x" hex_int "." hex_int ($[pP] $[-+]? dec_int)? skip
      |      dec_int "." dec_int ($[eE] $[-+]? dec_int)? skip
      | "0x" hex_int $[pP] $[-+]? dec_int skip
      |      dec_int $[eE] $[-+]? dec_int skip
  }
  INTEGER {
    "0b" bin_int skip
      | "0o" oct_int skip
      | "0x" hex_int skip
      |      dec_int   skip
  }
  STRINGLITERALSINGLE { "\"" string_char* "\"" skip }
  STRINGLITERAL {
    STRINGLITERALSINGLE
      | (line_string    skip)+
  }
  IDENTIFIER {
    $[A-Za-z_] $[A-Za-z0-9_]* skip
      | "@" STRINGLITERALSINGLE
  }
  BUILTINIDENTIFIER { "@" $[A-Za-z_] $[A-Za-z0-9_]* skip }

  @precedence {
    AMPERSANDEQUAL,
    AMPERSAND
  }
  AMPERSAND            { '&'   skip }
  AMPERSANDEQUAL       { '&='  skip }
  @precedence {
    ASTERISKPERCENTEQUAL, ASTERISKPIPEEQUAL,
    ASTERISKPERCENT, ASTERISKPIPE, ASTERISKEQUAL, ASTERISK2,
    ASTERISK
  }
  ASTERISK             { '*'   skip }
  ASTERISK2            { '**'  skip }
  ASTERISKEQUAL        { '*='  skip }
  ASTERISKPERCENT      { '*%'  skip }
  ASTERISKPERCENTEQUAL { '*%=' skip }
  ASTERISKPIPE         { '*|'  skip }
  ASTERISKPIPEEQUAL    { '*|=' skip }
  @precedence {
    CARETEQUAL,
    CARET
  }
  CARET                { '^'   skip }
  CARETEQUAL           { '^='  skip }
  COLON                { ':'   skip }
  COMMA                { ','   skip }
  @precedence {
    DOT3,
    DOT2, DOTASTERISK, DOTQUESTIONMARK,
    DOT
  }
  DOT                  { '.'   skip }
  DOT2                 { '..'  skip }
  DOT3                 { '...' skip }
  DOTASTERISK          { '.*'  skip }
  DOTQUESTIONMARK      { '.?'  skip }
  @precedence {
    EQUALEQUAL, EQUALRARROW,
    EQUAL
  }
  EQUAL                { '='   skip }
  EQUALEQUAL           { '=='  skip }
  EQUALRARROW          { '=>'  skip }
  @precedence {
    EXCLAMATIONMARKEQUAL,
    EXCLAMATIONMARK
  }
  EXCLAMATIONMARK      { '!'   skip }
  EXCLAMATIONMARKEQUAL { '!='  skip }
  @precedence {
    LARROW2PIPEEQUAL,
    LARROW2EQUAL, LARROW2PIPE,
    LARROW2, LARROWEQUAL,
    LARROW
  }
  LARROW               { '<'   skip }
  LARROW2              { '<<'  skip }
  LARROW2EQUAL         { '<<=' skip }
  LARROW2PIPE          { '<<|' skip }
  LARROW2PIPEEQUAL     { '<<|=' skip }
  LARROWEQUAL          { '<='  skip }
  LBRACE               { '{'   skip }
  LBRACKET             { '['   skip }
  LPAREN               { '('   skip }
  @precedence {
    MINUSPERCENTEQUAL, MINUSPIPEEQUAL
    MINUSEQUAL, MINUSPERCENT, MINUSRARROW, MINUSPIPE,
    MINUS
  }
  MINUS                { '-'   skip }
  MINUSEQUAL           { '-='  skip }
  MINUSPERCENT         { '-%'  skip }
  MINUSPERCENTEQUAL    { '-%=' skip }
  MINUSPIPE            { '-|'  skip }
  MINUSPIPEEQUAL       { '-|=' skip }
  MINUSRARROW          { '->'  skip }
  @precedence {
    PERCENTEQUAL,
    PERCENT
  }
  PERCENT              { '%'   skip }
  PERCENTEQUAL         { '%='  skip }
  @precedence {
    PIPE2, PIPEEQUAL,
    PIPE
  }
  PIPE                 { '|'   skip }
  PIPE2                { '||'  skip }
  PIPEEQUAL            { '|='  skip }
  @precedence {
    PLUSPERCENTEQUAL, PLUSPIPEEQUAL,
    PLUS2, PLUSEQUAL, PLUSPERCENT, PLUSPIPE,
    PLUS
  }
  PLUS                 { '+'   skip }
  PLUS2                { '++'  skip }
  PLUSEQUAL            { '+='  skip }
  PLUSPERCENT          { '+%'  skip }
  PLUSPERCENTEQUAL     { '+%=' skip }
  PLUSPIPE             { '+|'  skip }
  PLUSPIPEEQUAL        { '+|=' skip }
  LETTERC              { 'c'   skip }
  QUESTIONMARK         { '?'   skip }
  @precedence {
    RARROW2EQUAL,
    RARROW2, RARROWEQUAL,
    RARROW
  }
  RARROW               { '>'   skip }
  RARROW2              { '>>'  skip }
  RARROW2EQUAL         { '>>=' skip }
  RARROWEQUAL          { '>='  skip }
  RBRACE               { '}'   skip }
  RBRACKET             { ']'   skip }
  RPAREN               { ')'   skip }
  SEMICOLON            { ';'   skip }
  @precedence {
    SLASHEQUAL,
    SLASH
  }
  SLASH                { '/'   skip }
  SLASHEQUAL           { '/='  skip }
  TILDE                { '~'   skip }
}

kw<word> { @specialize[@name={word}]<IDENTIFIER, word> }

KEYWORD_addrspace   { kw<'addrspace'>   skip }
KEYWORD_align       { kw<'align'>       skip }
KEYWORD_allowzero   { kw<'allowzero'>   skip }
KEYWORD_and         { kw<'and'>         skip }
KEYWORD_anyframe    { kw<'anyframe'>    skip }
KEYWORD_anytype     { kw<'anytype'>     skip }
KEYWORD_asm         { kw<'asm'>         skip }
KEYWORD_async       { kw<'async'>       skip }
KEYWORD_await       { kw<'await'>       skip }
KEYWORD_break       { kw<'break'>       skip }
KEYWORD_callconv    { kw<'callconv'>    skip }
KEYWORD_catch       { kw<'catch'>       skip }
KEYWORD_comptime    { kw<'comptime'>    skip }
KEYWORD_const       { kw<'const'>       skip }
KEYWORD_continue    { kw<'continue'>    skip }
KEYWORD_defer       { kw<'defer'>       skip }
KEYWORD_else        { kw<'else'>        skip }
KEYWORD_enum        { kw<'enum'>        skip }
KEYWORD_errdefer    { kw<'errdefer'>    skip }
KEYWORD_error       { kw<'error'>       skip }
KEYWORD_export      { kw<'export'>      skip }
KEYWORD_extern      { kw<'extern'>      skip }
KEYWORD_fn          { kw<'fn'>          skip }
KEYWORD_for         { kw<'for'>         skip }
KEYWORD_if          { kw<'if'>          skip }
KEYWORD_inline      { kw<'inline'>      skip }
KEYWORD_noalias     { kw<'noalias'>     skip }
KEYWORD_nosuspend   { kw<'nosuspend'>   skip }
KEYWORD_noinline    { kw<'noinline'>    skip }
KEYWORD_opaque      { kw<'opaque'>      skip }
KEYWORD_or          { kw<'or'>          skip }
KEYWORD_orelse      { kw<'orelse'>      skip }
KEYWORD_packed      { kw<'packed'>      skip }
KEYWORD_pub         { kw<'pub'>         skip }
KEYWORD_resume      { kw<'resume'>      skip }
KEYWORD_return      { kw<'return'>      skip }
KEYWORD_linksection { kw<'linksection'> skip }
KEYWORD_struct      { kw<'struct'>      skip }
KEYWORD_suspend     { kw<'suspend'>     skip }
KEYWORD_switch      { kw<'switch'>      skip }
KEYWORD_test        { kw<'test'>        skip }
KEYWORD_threadlocal { kw<'threadlocal'> skip }
KEYWORD_try         { kw<'try'>         skip }
KEYWORD_union       { kw<'union'>       skip }
KEYWORD_unreachable { kw<'unreachable'> skip }
KEYWORD_usingnamespace { kw<'usingnamespace'> skip }
KEYWORD_var         { kw<'var'>         skip }
KEYWORD_volatile    { kw<'volatile'>    skip }
KEYWORD_while       { kw<'while'>       skip }

keyword {
  KEYWORD_addrspace | KEYWORD_align | KEYWORD_allowzero | KEYWORD_and
  | KEYWORD_anyframe | KEYWORD_anytype | KEYWORD_asm | KEYWORD_async
  | KEYWORD_await | KEYWORD_break | KEYWORD_callconv | KEYWORD_catch
  | KEYWORD_comptime | KEYWORD_const | KEYWORD_continue | KEYWORD_defer
  | KEYWORD_else | KEYWORD_enum | KEYWORD_errdefer | KEYWORD_error | KEYWORD_export
  | KEYWORD_extern | KEYWORD_fn | KEYWORD_for | KEYWORD_if
  | KEYWORD_inline | KEYWORD_noalias | KEYWORD_nosuspend | KEYWORD_noinline
  | KEYWORD_opaque | KEYWORD_or | KEYWORD_orelse | KEYWORD_packed
  | KEYWORD_pub | KEYWORD_resume | KEYWORD_return | KEYWORD_linksection
  | KEYWORD_struct | KEYWORD_suspend | KEYWORD_switch | KEYWORD_test
  | KEYWORD_threadlocal | KEYWORD_try | KEYWORD_union | KEYWORD_unreachable
  | KEYWORD_usingnamespace | KEYWORD_var | KEYWORD_volatile | KEYWORD_while
}
